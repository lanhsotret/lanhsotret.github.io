@import variables

=flex-format()
    display: flex
    flex-wrap: nowrap
    justify-content: space-between
    align-items: center

=flex_customize($value1, $value2, $value3, $value4, $value5)
    display: flex
    flex-wrap: $value1
    @if $value2
        flex-direction: $value2
    @if $value3
        justify-content: $value3
    @if $value4
        align-items: $value4
    @if $value5
        align-content: $value5

=flex_customize_2($value1, $value2, $value3, $value4)
    display: flex
    flex-flow: $value1
    @if $value2
        justify-content: $value2
    @if $value3
        align-items: $value3
    @if $value4
        align-content: $value4

=flex_default()
    display: flex
    flex-wrap: nowrap
    justify-content: space-between
    align-items: center

=margin_padding_format0()
    margin: 0px
    padding: 0px

=padding_r_l($value)
    padding-left: $value
    padding-right: $value

=position_absolute($param1,$param2, $param3, $param4)
    position: absolute
    top: $param1
    left: $param2
    bottom: $param3
    right: $param4

=absolute_default()
    position: absolute
    top: 0px
    left: 0px
    bottom: 0px
    right: 0px

=background-image($url)
    @if $url
        background-image: $url
    background-position: center center
    background-size: cover
    background-repeat: no-repeat

=padding_even($t_b, $r_l, $include) //padding r=l || t=b; $include: all||rl||tb
    @if $include == all
        padding: $t_b $r_l
    @else if $include == rl
        padding-left: $r_l
        padding-right: $r_l
    @else if $include == tb
        padding-top: $t_b
        padding-bottom: $t_b
    @else
        @error "unknown parameter #{$include}."

=padding_even_2($t_b, $r_l, $include)
    @if $include == all
        @if $r_l == similar
            padding: $t_b
        @else 
            padding: $t_b $r_l
    @else if $include == rl
        padding-left: $r_l
        padding-right: $r_l
    @else if $include == tb
        padding-top: $t_b
        padding-bottom: $t_b
    @else 
        @error "unkown parameter #{$include}"

=padding_customizer($top, $left, $bottom, $right)
    @if $top
        padding-top: $top
    @if $left
        padding-left: $left
    @if $bottom
        padding-bottom: $bottom
    @if $right
        padding-right: $right

=margin_even($t_b, $r_l, $include)//margin r=l || t=b; $include: all||rl||tb
    @if $include == all
        margin: $t_b $r_l
    @else if $include == rl
        margin: auto $r_l
    @else if $include ==tb
        margin: $t_b auto
    @else
        @error "unknown parameter #{$include}."

=margin_even_2($t_b, $r_l, $include)
    @if $include == all
        @if $r_l == similar
            margin: $t_b
        @else 
            margin: $t_b $r_l
    @else if $include == rl
        margin: auto $r_l
    @else if $include ==tb
        margin: $t_b auto
    @else
        @error "unknown parameter #{$include}."

=margin_customizer($top, $left, $bottom, $right)
    @if $top
        margin-top: $top
    @if $left
        margin-left: $left
    @if $bottom
        margin-bottom: $bottom
    @if $right
        margin-right: $right

=absolute_customize($value1, $value2, $value3, $value4)
    position: absolute
    @if $value1
        top: $value1
    @if $value2
        left: $value2
    @if $value3
        bottom: $value3
    @if $value4
        right: $value4

=pattern_simple($color1, $color2)
    background: linear-gradient(135deg, $color1 25%, transparent 25%) -50px 0, linear-gradient(225deg, $color1 25%, transparent 25%) -50px 0, linear-gradient(315deg, $color1 25%, transparent 25%), linear-gradient(45deg, $color1 25%, transparent 25%)
    background-size: 2em 2em
    background-color: $color2
    background-attachment: fixed

=mixin_if($total, $ele, $key_word, $value)
    @for $i from 1 through $total
        &#{$ele}:nth-of-type(#{$i})
            background-image: map-get($key-word, "#{$value}#{$i}")

=translate_animation($category, $total_img, $num_box, $num_bImg, $namClass, $value, $width_main, $total_width)
    $index: ceil($total_img / $num_box) - floor($num_bImg / $num_box)
    @for $i from 0 through $index
        .#{$namClass}-#{$i + 1}
            @if $category == forward
                @if $i == $index
                    transform: translateX(-($total_width - ($value * ($i - 1) + $width_main) + $value * ($i - 1)))
                @else
                    transform: translateX(-($value * $i))
            @if $category == backward
                @if $i == $index
                    transform: translateX($total_width - ($value * ($i - 1) + $width_main) + $value * ($i - 1))
                @else 
                    transform: translateX($value * $i)

=box_shadow($value1, $value2, $category)
    @if $category == outset
        box-shadow: $value1, $value2
    @if $category == inset
        box-shadow: $value1 inset, $value2 inset
    @if $category == all
        box-shadow: $value1, $value2, $value1 inset, $value2 inset

=background_url($name, $total, $url1, $url2, $url3)
    $url: ("url1": $url1, "url2": $url2, "url3": $url3)
    @for $i from 1 through $total
        #{$name}:nth-of-type(#{$i})
            background-image: url(map-get($url,"url#{$i}"))
            z-index: #{$i}
            position: absolute
            top: 10px * ($i - 1)
            left: 10px * ($i - 1)
            &::before
                content: ""
                +absolute_customize(-5px, -5px, -5px, -5px)
                box-shadow: rgba(white, 0.5) 1px 1px 2px inset, rgba(white, 0.3) -1px -1px 2px inset
=margin_flex($name, $total, $margin)
    @for $i from 1 through $total
        & > #{$name}:nth-of-type(#{$i})
            @if $i == 1
                margin-left: 0px
                margin-right: $margin
            @else if $i == $total
                margin-right: 0px
                margin-left: $margin
            @else 
                margin: auto $margin

=background_img($name, $total, $url...)
    @for $i from 1 through $total
        #{$name}:nth-of-type(#{$i})
            background-image: url(nth($url,$i))
=margin_flex_default()
    &:first-of-type
        margin-left: 0px
    &:last-of-type
        margin-right: 0px
=margin_flex_couple($t_b, $r_l, $margin)
    margin: $margin
    @if $t_b == tb
        &:first-of-type
            margin-top: 0px
        &:last-of-type
            margin-bottom: 0px
    @if $r_l == rl
        &:first-of-type
            margin-left: 0px
        &:last-of-type
            margin-right: 0px